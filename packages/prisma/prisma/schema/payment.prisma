model PaymentProvider {
  id       Int     @id @default(autoincrement())
  name     String  @unique // Provider name (Stripe, PayPal, bKash, etc.)
  active   Boolean @default(true) // If this provider is available
  metadata Json? // Store provider-specific details (e.g., API keys, webhooks)

  // references
  paymentMethods PaymentMethod[]

  @@map("PaymentProviders")
}

model PaymentMethod {
  id          Int                 @id @default(autoincrement())
  name        String
  providerId  Int
  description String?
  status      PaymentMethodStatus @default(ACTIVE)
  type        PaymentMethodType   @default(COD)
  
  // timestamps
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // references
  payments Payment[]
  orders   Order[]
  provider PaymentProvider @relation(fields: [providerId], references: [id])

  @@map("PaymentMethods")
}

enum PaymentMethodType {
  COD
  CARD
  NET_BANKING
  WALLET
}

model Payment {
  id                   Int           @id @default(autoincrement())
  uniqueId             String        @unique
  orderId              Int           @unique
  paymentMethodId      Int
  gatewayTransactionId String        @unique
  amount               Decimal
  status               PaymentStatus @default(PROCESSING)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  order  Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@map("Payments")
}

enum PaymentStatus {
  PROCESSING
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodStatus {
  ACTIVE
  INACTIVE
}

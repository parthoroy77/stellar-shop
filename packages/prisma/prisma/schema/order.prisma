// TODO: Later on add shipment model to accommodate shipping carrier and information
model Order {
  id              Int                @id @default(autoincrement())
  uniqueId        String             @unique
  userId          Int
  totalAmount     Decimal // Sub total of order
  discountAmount  Decimal // Discount applied to the order
  grossAmount     Decimal // Amount after discount but before shipping
  shippingAmount  Decimal // Shipping cost  
  netAmount       Decimal // Final amount after all adjustments
  orderNote       String?
  status          OrderStatus        @default(PLACED)
  paymentStatus   OrderPaymentStatus @default(UNPAID)
  paymentMethodId Int
  paymentId       Int?               @unique

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Status timestamps
  orderPlacedAt    DateTime
  orderPackedAt    DateTime?
  orderShippedAt   DateTime?
  orderDeliveredAt DateTime?
  orderCanceledAt  DateTime?

  // references
  user                 User                   @relation(fields: [userId], references: [id])
  orderShippingAddress OrderShippingAddress[]
  orderItems           OrderItem[]
  payment              Payment?
  paymentMethod        PaymentMethod          @relation(fields: [paymentMethodId], references: [id])
  subOrders            SubOrder[]
  orderStatusHistory   OrderStatusHistory[]

  @@index([uniqueId, userId, id])
  @@map("Orders")
}

model OrderItem {
  id               Int     @id @default(autoincrement())
  orderId          Int
  productId        Int
  productVariantId Int?
  productName      String
  attributes       Json // Store product attributes statically  
  price            Decimal
  quantity         Int
  totalAmount      Decimal // Total amount for this order item

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  order          Order           @relation(fields: [orderId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([orderId, productId, productVariantId])
  @@map("OrderItems")
}

enum OrderStatus {
  PLACED
  PROCESSING
  PACKED
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  DELIVERY_FAILED
  RETURN_INITIATED
  RETURN_RECEIVED
  REPLACEMENT_INITIATED
  REFUND_INITIATED
  REFUND_COMPLETED
  CANCELED
}

enum OrderPaymentStatus {
  PENDING
  PAID
  UNPAID
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  orderId   Int
  status    OrderStatus
  changedAt DateTime    @default(now())

  // references
  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId, status])
  @@map("OrderStatusHistory")
}

// Statically Store the shipping address 
model OrderShippingAddress {
  id          Int         @id @default(autoincrement())
  orderId     Int
  fullName    String
  phoneNumber String
  fullAddress String
  country     String
  state       String
  city        String
  zipCode     String      @db.VarChar(20)
  type        AddressType

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // references
  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@map("OrderShippingAddress")
}
